   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.P0_5_set_mode,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	P0_5_set_mode:
  23              	.LFB88:
  24              		.file 1 "../GPIO.h"
   1:../GPIO.h     **** #ifndef __GPIO_H__
   2:../GPIO.h     **** #define __GPIO_H__
   3:../GPIO.h     **** 
   4:../GPIO.h     **** /* Generated for XMC1100_TSSOP38 on: Wed Feb 13 23:11:00 2013*/
   5:../GPIO.h     **** 
   6:../GPIO.h     **** #include <XMC1100.h>
   7:../GPIO.h     **** 
   8:../GPIO.h     **** #define INPUT           0x00U
   9:../GPIO.h     **** #define INPUT_PD        0x08U
  10:../GPIO.h     **** #define INPUT_PU        0x10U
  11:../GPIO.h     **** #define INPUT_PPS       0x18U
  12:../GPIO.h     **** #define INPUT_INV       0x20U
  13:../GPIO.h     **** #define INPUT_INV_PD    0x28U
  14:../GPIO.h     **** #define INPUT_INV_PU    0x30U
  15:../GPIO.h     **** #define INPUT_INV_PPS   0x38U
  16:../GPIO.h     **** #define OUTPUT_PP_GP    0x80U
  17:../GPIO.h     **** #define OUTPUT_PP_AF1   0x88U
  18:../GPIO.h     **** #define OUTPUT_PP_AF2   0x90U
  19:../GPIO.h     **** #define OUTPUT_PP_AF3   0x98U
  20:../GPIO.h     **** #define OUTPUT_PP_AF4   0xA0U
  21:../GPIO.h     **** #define OUTPUT_PP_AF5   0xA8U
  22:../GPIO.h     **** #define OUTPUT_PP_AF6   0xB0U
  23:../GPIO.h     **** #define OUTPUT_PP_AF7   0xB8U
  24:../GPIO.h     **** #define OUTPUT_OD_GP    0xC0U
  25:../GPIO.h     **** #define OUTPUT_OD_AF1   0xC8U
  26:../GPIO.h     **** #define OUTPUT_OD_AF2   0xD0U
  27:../GPIO.h     **** #define OUTPUT_OD_AF3   0xD8U
  28:../GPIO.h     **** #define OUTPUT_OD_AF4   0XE0U
  29:../GPIO.h     **** #define OUTPUT_OD_AF5   0xE8U
  30:../GPIO.h     **** #define OUTPUT_OD_AF6   0xF0U
  31:../GPIO.h     **** #define OUTPUT_OD_AF7   0XF8U
  32:../GPIO.h     **** 
  33:../GPIO.h     **** #define SOFTWARE        0x0UL
  34:../GPIO.h     **** #define HW0             0x1UL
  35:../GPIO.h     **** #define HW1             0x2UL
  36:../GPIO.h     **** 
  37:../GPIO.h     **** __STATIC_INLINE void P0_0_set_mode(uint8_t mode){
  38:../GPIO.h     ****     PORT0->IOCR0 &= ~0x000000f8UL;
  39:../GPIO.h     ****     PORT0->IOCR0 |= mode << 0;
  40:../GPIO.h     **** }
  41:../GPIO.h     **** 
  42:../GPIO.h     **** __STATIC_INLINE void P0_0_set_hwsel(uint32_t config){
  43:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000003UL;
  44:../GPIO.h     ****     PORT0->HWSEL |= config << 0;
  45:../GPIO.h     **** }
  46:../GPIO.h     **** 
  47:../GPIO.h     **** __STATIC_INLINE void P0_0_set_standard_hysteresis(){
  48:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000004UL;
  49:../GPIO.h     **** }
  50:../GPIO.h     **** 
  51:../GPIO.h     **** __STATIC_INLINE void P0_0_set_large_hysteresis(){
  52:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000004UL;
  53:../GPIO.h     **** }
  54:../GPIO.h     **** 
  55:../GPIO.h     **** __STATIC_INLINE void P0_0_set(void){
  56:../GPIO.h     ****     PORT0->OMR = 0x00000001UL;
  57:../GPIO.h     **** }
  58:../GPIO.h     **** 
  59:../GPIO.h     **** __STATIC_INLINE void P0_0_reset(void){
  60:../GPIO.h     ****     PORT0->OMR = 0x00010000UL;
  61:../GPIO.h     **** }
  62:../GPIO.h     **** 
  63:../GPIO.h     **** __STATIC_INLINE void P0_0_toggle(void){
  64:../GPIO.h     ****     PORT0->OMR = 0x00010001UL;
  65:../GPIO.h     **** }
  66:../GPIO.h     **** 
  67:../GPIO.h     **** __STATIC_INLINE uint32_t P0_0_read(void){
  68:../GPIO.h     ****     return(PORT0->IN & 0x00000001UL);
  69:../GPIO.h     **** }
  70:../GPIO.h     **** 
  71:../GPIO.h     **** __STATIC_INLINE void P0_0_enable_pps(void){
  72:../GPIO.h     ****     PORT0->PPS |= 0x00000001UL;
  73:../GPIO.h     **** }
  74:../GPIO.h     **** 
  75:../GPIO.h     **** __STATIC_INLINE void P0_0_disable_pps(void){
  76:../GPIO.h     ****     PORT0->PPS &= ~0x00000001UL;
  77:../GPIO.h     **** }
  78:../GPIO.h     **** 
  79:../GPIO.h     **** __STATIC_INLINE void P0_1_set_mode(uint8_t mode){
  80:../GPIO.h     ****     PORT0->IOCR0 &= ~0x0000f800UL;
  81:../GPIO.h     ****     PORT0->IOCR0 |= mode << 8;
  82:../GPIO.h     **** }
  83:../GPIO.h     **** 
  84:../GPIO.h     **** __STATIC_INLINE void P0_1_set_hwsel(uint32_t config){
  85:../GPIO.h     ****     PORT0->HWSEL &= ~0x0000000cUL;
  86:../GPIO.h     ****     PORT0->HWSEL |= config << 2;
  87:../GPIO.h     **** }
  88:../GPIO.h     **** 
  89:../GPIO.h     **** __STATIC_INLINE void P0_1_set_standard_hysteresis(){
  90:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000040UL;
  91:../GPIO.h     **** }
  92:../GPIO.h     **** 
  93:../GPIO.h     **** __STATIC_INLINE void P0_1_set_large_hysteresis(){
  94:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000040UL;
  95:../GPIO.h     **** }
  96:../GPIO.h     **** 
  97:../GPIO.h     **** __STATIC_INLINE void P0_1_set(void){
  98:../GPIO.h     ****     PORT0->OMR = 0x00000002UL;
  99:../GPIO.h     **** }
 100:../GPIO.h     **** 
 101:../GPIO.h     **** __STATIC_INLINE void P0_1_reset(void){
 102:../GPIO.h     ****     PORT0->OMR = 0x00020000UL;
 103:../GPIO.h     **** }
 104:../GPIO.h     **** 
 105:../GPIO.h     **** __STATIC_INLINE void P0_1_toggle(void){
 106:../GPIO.h     ****     PORT0->OMR = 0x00020002UL;
 107:../GPIO.h     **** }
 108:../GPIO.h     **** 
 109:../GPIO.h     **** __STATIC_INLINE uint32_t P0_1_read(void){
 110:../GPIO.h     ****     return(PORT0->IN & 0x00000002UL);
 111:../GPIO.h     **** }
 112:../GPIO.h     **** 
 113:../GPIO.h     **** __STATIC_INLINE void P0_1_enable_pps(void){
 114:../GPIO.h     ****     PORT0->PPS |= 0x00000002UL;
 115:../GPIO.h     **** }
 116:../GPIO.h     **** 
 117:../GPIO.h     **** __STATIC_INLINE void P0_1_disable_pps(void){
 118:../GPIO.h     ****     PORT0->PPS &= ~0x00000002UL;
 119:../GPIO.h     **** }
 120:../GPIO.h     **** 
 121:../GPIO.h     **** __STATIC_INLINE void P0_2_set_mode(uint8_t mode){
 122:../GPIO.h     ****     PORT0->IOCR0 &= ~0x00f80000UL;
 123:../GPIO.h     ****     PORT0->IOCR0 |= mode << 16;
 124:../GPIO.h     **** }
 125:../GPIO.h     **** 
 126:../GPIO.h     **** __STATIC_INLINE void P0_2_set_hwsel(uint32_t config){
 127:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000030UL;
 128:../GPIO.h     ****     PORT0->HWSEL |= config << 4;
 129:../GPIO.h     **** }
 130:../GPIO.h     **** 
 131:../GPIO.h     **** __STATIC_INLINE void P0_2_set_standard_hysteresis(){
 132:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00000400UL;
 133:../GPIO.h     **** }
 134:../GPIO.h     **** 
 135:../GPIO.h     **** __STATIC_INLINE void P0_2_set_large_hysteresis(){
 136:../GPIO.h     ****     PORT0->PHCR0 |= 0x00000400UL;
 137:../GPIO.h     **** }
 138:../GPIO.h     **** 
 139:../GPIO.h     **** __STATIC_INLINE void P0_2_set(void){
 140:../GPIO.h     ****     PORT0->OMR = 0x00000004UL;
 141:../GPIO.h     **** }
 142:../GPIO.h     **** 
 143:../GPIO.h     **** __STATIC_INLINE void P0_2_reset(void){
 144:../GPIO.h     ****     PORT0->OMR = 0x00040000UL;
 145:../GPIO.h     **** }
 146:../GPIO.h     **** 
 147:../GPIO.h     **** __STATIC_INLINE void P0_2_toggle(void){
 148:../GPIO.h     ****     PORT0->OMR = 0x00040004UL;
 149:../GPIO.h     **** }
 150:../GPIO.h     **** 
 151:../GPIO.h     **** __STATIC_INLINE uint32_t P0_2_read(void){
 152:../GPIO.h     ****     return(PORT0->IN & 0x00000004UL);
 153:../GPIO.h     **** }
 154:../GPIO.h     **** 
 155:../GPIO.h     **** __STATIC_INLINE void P0_2_enable_pps(void){
 156:../GPIO.h     ****     PORT0->PPS |= 0x00000004UL;
 157:../GPIO.h     **** }
 158:../GPIO.h     **** 
 159:../GPIO.h     **** __STATIC_INLINE void P0_2_disable_pps(void){
 160:../GPIO.h     ****     PORT0->PPS &= ~0x00000004UL;
 161:../GPIO.h     **** }
 162:../GPIO.h     **** 
 163:../GPIO.h     **** __STATIC_INLINE void P0_3_set_mode(uint8_t mode){
 164:../GPIO.h     ****     PORT0->IOCR0 &= ~0xf8000000UL;
 165:../GPIO.h     ****     PORT0->IOCR0 |= mode << 24;
 166:../GPIO.h     **** }
 167:../GPIO.h     **** 
 168:../GPIO.h     **** __STATIC_INLINE void P0_3_set_hwsel(uint32_t config){
 169:../GPIO.h     ****     PORT0->HWSEL &= ~0x000000c0UL;
 170:../GPIO.h     ****     PORT0->HWSEL |= config << 6;
 171:../GPIO.h     **** }
 172:../GPIO.h     **** 
 173:../GPIO.h     **** __STATIC_INLINE void P0_3_set_standard_hysteresis(){
 174:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00004000UL;
 175:../GPIO.h     **** }
 176:../GPIO.h     **** 
 177:../GPIO.h     **** __STATIC_INLINE void P0_3_set_large_hysteresis(){
 178:../GPIO.h     ****     PORT0->PHCR0 |= 0x00004000UL;
 179:../GPIO.h     **** }
 180:../GPIO.h     **** 
 181:../GPIO.h     **** __STATIC_INLINE void P0_3_set(void){
 182:../GPIO.h     ****     PORT0->OMR = 0x00000008UL;
 183:../GPIO.h     **** }
 184:../GPIO.h     **** 
 185:../GPIO.h     **** __STATIC_INLINE void P0_3_reset(void){
 186:../GPIO.h     ****     PORT0->OMR = 0x00080000UL;
 187:../GPIO.h     **** }
 188:../GPIO.h     **** 
 189:../GPIO.h     **** __STATIC_INLINE void P0_3_toggle(void){
 190:../GPIO.h     ****     PORT0->OMR = 0x00080008UL;
 191:../GPIO.h     **** }
 192:../GPIO.h     **** 
 193:../GPIO.h     **** __STATIC_INLINE uint32_t P0_3_read(void){
 194:../GPIO.h     ****     return(PORT0->IN & 0x00000008UL);
 195:../GPIO.h     **** }
 196:../GPIO.h     **** 
 197:../GPIO.h     **** __STATIC_INLINE void P0_3_enable_pps(void){
 198:../GPIO.h     ****     PORT0->PPS |= 0x00000008UL;
 199:../GPIO.h     **** }
 200:../GPIO.h     **** 
 201:../GPIO.h     **** __STATIC_INLINE void P0_3_disable_pps(void){
 202:../GPIO.h     ****     PORT0->PPS &= ~0x00000008UL;
 203:../GPIO.h     **** }
 204:../GPIO.h     **** 
 205:../GPIO.h     **** __STATIC_INLINE void P0_4_set_mode(uint8_t mode){
 206:../GPIO.h     ****     PORT0->IOCR4 &= ~0x000000f8UL;
 207:../GPIO.h     ****     PORT0->IOCR4 |= mode << 0;
 208:../GPIO.h     **** }
 209:../GPIO.h     **** 
 210:../GPIO.h     **** __STATIC_INLINE void P0_4_set_hwsel(uint32_t config){
 211:../GPIO.h     ****     PORT0->HWSEL &= ~0x00000300UL;
 212:../GPIO.h     ****     PORT0->HWSEL |= config << 8;
 213:../GPIO.h     **** }
 214:../GPIO.h     **** 
 215:../GPIO.h     **** __STATIC_INLINE void P0_4_set_standard_hysteresis(){
 216:../GPIO.h     ****     PORT0->PHCR0 &= ~0x00040000UL;
 217:../GPIO.h     **** }
 218:../GPIO.h     **** 
 219:../GPIO.h     **** __STATIC_INLINE void P0_4_set_large_hysteresis(){
 220:../GPIO.h     ****     PORT0->PHCR0 |= 0x00040000UL;
 221:../GPIO.h     **** }
 222:../GPIO.h     **** 
 223:../GPIO.h     **** __STATIC_INLINE void P0_4_set(void){
 224:../GPIO.h     ****     PORT0->OMR = 0x00000010UL;
 225:../GPIO.h     **** }
 226:../GPIO.h     **** 
 227:../GPIO.h     **** __STATIC_INLINE void P0_4_reset(void){
 228:../GPIO.h     ****     PORT0->OMR = 0x00100000UL;
 229:../GPIO.h     **** }
 230:../GPIO.h     **** 
 231:../GPIO.h     **** __STATIC_INLINE void P0_4_toggle(void){
 232:../GPIO.h     ****     PORT0->OMR = 0x00100010UL;
 233:../GPIO.h     **** }
 234:../GPIO.h     **** 
 235:../GPIO.h     **** __STATIC_INLINE uint32_t P0_4_read(void){
 236:../GPIO.h     ****     return(PORT0->IN & 0x00000010UL);
 237:../GPIO.h     **** }
 238:../GPIO.h     **** 
 239:../GPIO.h     **** __STATIC_INLINE void P0_4_enable_pps(void){
 240:../GPIO.h     ****     PORT0->PPS |= 0x00000010UL;
 241:../GPIO.h     **** }
 242:../GPIO.h     **** 
 243:../GPIO.h     **** __STATIC_INLINE void P0_4_disable_pps(void){
 244:../GPIO.h     ****     PORT0->PPS &= ~0x00000010UL;
 245:../GPIO.h     **** }
 246:../GPIO.h     **** 
 247:../GPIO.h     **** __STATIC_INLINE void P0_5_set_mode(uint8_t mode){
  25              		.loc 1 247 0
  26              		.cfi_startproc
  27 0000 80B5     		push	{r7, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 82B0     		sub	sp, sp, #8
  33              	.LCFI1:
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              	.LCFI2:
  37              		.cfi_def_cfa_register 7
  38 0006 021C     		mov	r2, r0
  39 0008 FB1D     		add	r3, r7, #7
  40 000a 1A70     		strb	r2, [r3]
 248:../GPIO.h     ****     PORT0->IOCR4 &= ~0x0000f800UL;
  41              		.loc 1 248 0
  42 000c 084B     		ldr	r3, .L2
  43 000e 084A     		ldr	r2, .L2
  44 0010 5169     		ldr	r1, [r2, #20]
  45 0012 084A     		ldr	r2, .L2+4
  46 0014 0A40     		and	r2, r1
  47 0016 5A61     		str	r2, [r3, #20]
 249:../GPIO.h     ****     PORT0->IOCR4 |= mode << 8;
  48              		.loc 1 249 0
  49 0018 054B     		ldr	r3, .L2
  50 001a 054A     		ldr	r2, .L2
  51 001c 5169     		ldr	r1, [r2, #20]
  52 001e FA1D     		add	r2, r7, #7
  53 0020 1278     		ldrb	r2, [r2]
  54 0022 1202     		lsl	r2, r2, #8
  55 0024 0A43     		orr	r2, r1
  56 0026 5A61     		str	r2, [r3, #20]
 250:../GPIO.h     **** }
  57              		.loc 1 250 0
  58 0028 BD46     		mov	sp, r7
  59 002a 02B0     		add	sp, sp, #8
  60              		@ sp needed for prologue
  61 002c 80BD     		pop	{r7, pc}
  62              	.L3:
  63 002e C046     		.align	2
  64              	.L2:
  65 0030 00000440 		.word	1074003968
  66 0034 FF07FFFF 		.word	-63489
  67              		.cfi_endproc
  68              	.LFE88:
  70              		.comm	matrix,264,4
  71              		.bss
  72              		.align	2
  73              	ptr:
  74 0000 00000000 		.space	4
  75              		.align	2
  76              	pos:
  77 0004 00000000 		.space	4
  78              		.global	go
  81              	go:
  82 0008 00       		.space	1
  83 0009 000000   		.section	.text.main,"ax",%progbits
  84              		.align	2
  85              		.global	main
  86              		.code	16
  87              		.thumb_func
  89              	main:
  90              	.LFB402:
  91              		.file 2 "../Main.c"
   1:../Main.c     **** /*
   2:../Main.c     ****  * Main.c
   3:../Main.c     ****  *
   4:../Main.c     ****  *  Created on: 06.03.2015
   5:../Main.c     ****  *      Author: blinch89
   6:../Main.c     ****  */
   7:../Main.c     **** 
   8:../Main.c     **** #include <DAVE3.h>			//Declarations from DAVE3 Code Generation (includes SFR declaration)
   9:../Main.c     **** #include "light_ws2812_cortex.h"
  10:../Main.c     **** #include "XMC1100.h"
  11:../Main.c     **** #include "GPIO.h"
  12:../Main.c     **** #include "core_cmFunc.h"
  13:../Main.c     **** 
  14:../Main.c     **** void updateOnboardLEDs();
  15:../Main.c     **** void testUARTTx();
  16:../Main.c     **** 
  17:../Main.c     **** #define WS2812_QUANTITY 88
  18:../Main.c     **** 
  19:../Main.c     **** uint8_t matrix[88*3];
  20:../Main.c     **** static unsigned char *ptr;
  21:../Main.c     **** static unsigned int pos = 0;
  22:../Main.c     **** volatile unsigned char go = 0;
  23:../Main.c     **** 
  24:../Main.c     **** 
  25:../Main.c     **** int main(void)
  26:../Main.c     **** {
  92              		.loc 2 26 0
  93              		.cfi_startproc
  94 0000 80B5     		push	{r7, lr}
  95              	.LCFI3:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 00AF     		add	r7, sp, #0
 100              	.LCFI4:
 101              		.cfi_def_cfa_register 7
  27:../Main.c     **** 	//status_t status;		// Declaration of return variable for DAVE3 APIs (toggle comment if required)
  28:../Main.c     **** 	DAVE_Init();			// Initialization of DAVE Apps
 102              		.loc 2 28 0
 103 0004 FFF7FEFF 		bl	DAVE_Init
  29:../Main.c     **** 	IO004_SetPin(IO004_Handle0);
 104              		.loc 2 29 0
 105 0008 0F4B     		ldr	r3, .L8
 106 000a 5B68     		ldr	r3, [r3, #4]
 107 000c 0E4A     		ldr	r2, .L8
 108 000e 5278     		ldrb	r2, [r2, #1]
 109 0010 0121     		mov	r1, #1
 110 0012 081C     		mov	r0, r1
 111 0014 9040     		lsl	r0, r0, r2
 112 0016 021C     		mov	r2, r0
 113 0018 5A60     		str	r2, [r3, #4]
  30:../Main.c     **** 	P0_5_set_mode(OUTPUT_PP_GP); 	//WS2812 data pin
 114              		.loc 2 30 0
 115 001a 8020     		mov	r0, #128
 116 001c FFF7FEFF 		bl	P0_5_set_mode
 117 0020 00E0     		b	.L6
 118              	.L7:
  31:../Main.c     **** 	//handle_t timer;
  32:../Main.c     **** 	//timer=SYSTM001_CreateTimer(1000,SYSTM001_PERIODIC,testUARTTx,NULL);
  33:../Main.c     **** 	//SYSTM001_StartTimer(timer);
  34:../Main.c     **** 	while(1)
  35:../Main.c     **** 	{
  36:../Main.c     **** 		if (go==1)
  37:../Main.c     **** 		{
  38:../Main.c     **** 			 __disable_irq();
  39:../Main.c     **** 			ws2812_sendarray(matrix, WS2812_QUANTITY * 3);
  40:../Main.c     **** 			__enable_irq();
  41:../Main.c     **** 			go=0;
  42:../Main.c     **** 		}
  43:../Main.c     **** 	}
 119              		.loc 2 43 0
 120 0022 C046     		mov	r8, r8
 121              	.L6:
  36:../Main.c     **** 		if (go==1)
 122              		.loc 2 36 0
 123 0024 094B     		ldr	r3, .L8+4
 124 0026 1B78     		ldrb	r3, [r3]
 125 0028 DBB2     		uxtb	r3, r3
 126 002a 012B     		cmp	r3, #1
 127 002c F9D1     		bne	.L7
 128              	.LBB6:
 129              	.LBB7:
 130              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmFunc.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  * @file     core_cmFunc.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  * @date     25. February 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Control Register
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the content of the Control Register.
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               Control Register value
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regControl);
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Control Register
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regControl = control;
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get IPSR Register
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               IPSR Register value
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regIPSR);
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get APSR Register
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               APSR Register value
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regAPSR);
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get xPSR Register
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               xPSR Register value
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regXPSR);
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               PSP Register value
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regProcessStackPointer);
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               MSP Register value
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regMainStackPointer);
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Priority Mask
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               Priority Mask value
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regPriMask);
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Priority Mask
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regPriMask = (priMask);
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Enable FIQ
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Disable FIQ
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Base Priority
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               Base Priority register value
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regBasePri);
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Base Priority
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get Fault Mask
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               Fault Mask register value
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regFaultMask);
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set Fault Mask
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Get FPSCR
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   return(__regfpscr);
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #else
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****    return(0);
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #endif
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Set FPSCR
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __regfpscr = (fpscr);
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #endif
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* IAR iccarm specific functions */
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #include <cmsis_iar.h>
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* TI CCS specific functions */
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #include <cmsis_ccs.h>
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /* GNU gcc specific functions */
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 328:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 329:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 330:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 331:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 332:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** }
 333:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 334:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 335:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 336:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** 
 337:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 338:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   Can only be executed in Privileged modes.
 339:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****  */
 340:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 341:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h **** {
 342:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 131              		.loc 3 342 0
 132              	@ 342 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmFunc.h" 1
 133 002e 72B6     		cpsid i
 134              	@ 0 "" 2
 135              		.code	16
 136              	.LBE7:
 137              	.LBE6:
  39:../Main.c     **** 			ws2812_sendarray(matrix, WS2812_QUANTITY * 3);
 138              		.loc 2 39 0
 139 0030 074A     		ldr	r2, .L8+8
 140 0032 8423     		mov	r3, #132
 141 0034 5B00     		lsl	r3, r3, #1
 142 0036 101C     		mov	r0, r2
 143 0038 191C     		mov	r1, r3
 144 003a FFF7FEFF 		bl	ws2812_sendarray
 145              	.LBB8:
 146              	.LBB9:
 331:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 147              		.loc 3 331 0
 148              	@ 331 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmFunc.h" 1
 149 003e 62B6     		cpsie i
 150              	@ 0 "" 2
 151              		.code	16
 152              	.LBE9:
 153              	.LBE8:
  41:../Main.c     **** 			go=0;
 154              		.loc 2 41 0
 155 0040 024B     		ldr	r3, .L8+4
 156 0042 0022     		mov	r2, #0
 157 0044 1A70     		strb	r2, [r3]
 158              		.loc 2 43 0
 159 0046 ECE7     		b	.L7
 160              	.L9:
 161              		.align	2
 162              	.L8:
 163 0048 00000000 		.word	IO004_Handle0
 164 004c 00000000 		.word	go
 165 0050 00000000 		.word	matrix
 166              		.cfi_endproc
 167              	.LFE402:
 169              		.section	.text.testUARTTx,"ax",%progbits
 170              		.align	2
 171              		.global	testUARTTx
 172              		.code	16
 173              		.thumb_func
 175              	testUARTTx:
 176              	.LFB403:
  44:../Main.c     **** 	return 0;
  45:../Main.c     **** }
  46:../Main.c     **** 
  47:../Main.c     **** 
  48:../Main.c     **** 
  49:../Main.c     **** void testUARTTx()
  50:../Main.c     **** {
 177              		.loc 2 50 0
 178              		.cfi_startproc
 179 0000 80B5     		push	{r7, lr}
 180              	.LCFI5:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              	.LCFI6:
 186              		.cfi_def_cfa_register 7
  51:../Main.c     **** 	//const uint8_t daten[] = "ABCDEFGHIJKLMNOP\n";
  52:../Main.c     **** 	//uint16_t written = 0;
  53:../Main.c     **** 	//while(written < sizeof(daten)-1)
  54:../Main.c     **** 	//	written += UART001_WriteDataBytes(&UART001_Handle0,&daten[written],sizeof(daten)-written-1);
  55:../Main.c     **** 
  56:../Main.c     **** 	//UART001_WriteDataBytes(&UART001_Handle0,daten,17);
  57:../Main.c     **** 	//UART001_WriteDataMultiple(&UART001_Handle0,(uint16_t *)daten,sizeof(daten)/2);
  58:../Main.c     **** }
 187              		.loc 2 58 0
 188 0004 BD46     		mov	sp, r7
 189              		@ sp needed for prologue
 190 0006 80BD     		pop	{r7, pc}
 191              		.cfi_endproc
 192              	.LFE403:
 194              		.section	.text.updateOnboardLEDs,"ax",%progbits
 195              		.align	2
 196              		.global	updateOnboardLEDs
 197              		.code	16
 198              		.thumb_func
 200              	updateOnboardLEDs:
 201              	.LFB404:
  59:../Main.c     **** 
  60:../Main.c     **** 
  61:../Main.c     **** 
  62:../Main.c     **** void updateOnboardLEDs()
  63:../Main.c     **** {
 202              		.loc 2 63 0
 203              		.cfi_startproc
 204 0000 80B5     		push	{r7, lr}
 205              	.LCFI7:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 00AF     		add	r7, sp, #0
 210              	.LCFI8:
 211              		.cfi_def_cfa_register 7
  64:../Main.c     **** 	IO004_TogglePin(IO004_Handle0);
 212              		.loc 2 64 0
 213 0004 094B     		ldr	r3, .L12
 214 0006 5B68     		ldr	r3, [r3, #4]
 215 0008 084A     		ldr	r2, .L12
 216 000a 5278     		ldrb	r2, [r2, #1]
 217 000c 0849     		ldr	r1, .L12+4
 218 000e 081C     		mov	r0, r1
 219 0010 9040     		lsl	r0, r0, r2
 220 0012 021C     		mov	r2, r0
 221 0014 5A60     		str	r2, [r3, #4]
  65:../Main.c     **** 	IO004_TogglePin(IO004_Handle1);
 222              		.loc 2 65 0
 223 0016 074B     		ldr	r3, .L12+8
 224 0018 5B68     		ldr	r3, [r3, #4]
 225 001a 064A     		ldr	r2, .L12+8
 226 001c 5278     		ldrb	r2, [r2, #1]
 227 001e 0449     		ldr	r1, .L12+4
 228 0020 081C     		mov	r0, r1
 229 0022 9040     		lsl	r0, r0, r2
 230 0024 021C     		mov	r2, r0
 231 0026 5A60     		str	r2, [r3, #4]
  66:../Main.c     **** }
 232              		.loc 2 66 0
 233 0028 BD46     		mov	sp, r7
 234              		@ sp needed for prologue
 235 002a 80BD     		pop	{r7, pc}
 236              	.L13:
 237              		.align	2
 238              	.L12:
 239 002c 00000000 		.word	IO004_Handle0
 240 0030 01000100 		.word	65537
 241 0034 00000000 		.word	IO004_Handle1
 242              		.cfi_endproc
 243              	.LFE404:
 245              		.section	.text.USIC0_0_IRQHandler,"ax",%progbits
 246              		.align	2
 247              		.global	USIC0_0_IRQHandler
 248              		.code	16
 249              		.thumb_func
 251              	USIC0_0_IRQHandler:
 252              	.LFB405:
  67:../Main.c     **** 
  68:../Main.c     **** 
  69:../Main.c     **** 
  70:../Main.c     **** void RxFIFOBufferEventHandler()
  71:../Main.c     **** {
 253              		.loc 2 71 0
 254              		.cfi_startproc
 255 0000 80B5     		push	{r7, lr}
 256              	.LCFI9:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 7, -8
 259              		.cfi_offset 14, -4
 260 0002 82B0     		sub	sp, sp, #8
 261              	.LCFI10:
 262              		.cfi_def_cfa_offset 16
 263 0004 00AF     		add	r7, sp, #0
 264              	.LCFI11:
 265              		.cfi_def_cfa_register 7
  72:../Main.c     **** 	if(UART001_GetFlagStatus(&UART001_Handle0,UART001_FIFO_STD_RECV_BUF_FLAG) == UART001_SET)
 266              		.loc 2 72 0
 267 0006 204B     		ldr	r3, .L19
 268 0008 181C     		mov	r0, r3
 269 000a 1021     		mov	r1, #16
 270 000c FFF7FEFF 		bl	UART001_GetFlagStatus
 271 0010 031C     		mov	r3, r0
 272 0012 022B     		cmp	r3, #2
 273 0014 35D1     		bne	.L14
 274              	.LBB10:
  73:../Main.c     **** 	{
  74:../Main.c     **** 		UART001_ClearFlag(&UART001_Handle0,UART001_FIFO_STD_RECV_BUF_FLAG);
 275              		.loc 2 74 0
 276 0016 1C4B     		ldr	r3, .L19
 277 0018 181C     		mov	r0, r3
 278 001a 1021     		mov	r1, #16
 279 001c FFF7FEFF 		bl	UART001_ClearFlag
  75:../Main.c     **** 		unsigned char b;
  76:../Main.c     **** 		b = UART001_ReadData(UART001_Handle0);
 280              		.loc 2 76 0
 281 0020 194B     		ldr	r3, .L19
 282 0022 1A68     		ldr	r2, [r3]
 283 0024 8E23     		mov	r3, #142
 284 0026 5B00     		lsl	r3, r3, #1
 285 0028 D258     		ldr	r2, [r2, r3]
 286 002a FB1D     		add	r3, r7, #7
 287 002c 1A70     		strb	r2, [r3]
  77:../Main.c     **** 		if (b == 1)  {pos=0; ptr=matrix; return;}
 288              		.loc 2 77 0
 289 002e FB1D     		add	r3, r7, #7
 290 0030 1B78     		ldrb	r3, [r3]
 291 0032 012B     		cmp	r3, #1
 292 0034 06D1     		bne	.L16
 293              		.loc 2 77 0 is_stmt 0 discriminator 1
 294 0036 154B     		ldr	r3, .L19+4
 295 0038 0022     		mov	r2, #0
 296 003a 1A60     		str	r2, [r3]
 297 003c 144B     		ldr	r3, .L19+8
 298 003e 154A     		ldr	r2, .L19+12
 299 0040 1A60     		str	r2, [r3]
 300 0042 1EE0     		b	.L14
 301              	.L16:
  78:../Main.c     **** 		if (pos == (WS2812_QUANTITY*3)) {} else {*ptr=b; ptr++; pos++;}
 302              		.loc 2 78 0 is_stmt 1
 303 0044 114B     		ldr	r3, .L19+4
 304 0046 1A68     		ldr	r2, [r3]
 305 0048 8423     		mov	r3, #132
 306 004a 5B00     		lsl	r3, r3, #1
 307 004c 9A42     		cmp	r2, r3
 308 004e 0ED0     		beq	.L17
 309              		.loc 2 78 0 is_stmt 0 discriminator 1
 310 0050 0F4B     		ldr	r3, .L19+8
 311 0052 1B68     		ldr	r3, [r3]
 312 0054 FA1D     		add	r2, r7, #7
 313 0056 1278     		ldrb	r2, [r2]
 314 0058 1A70     		strb	r2, [r3]
 315 005a 0D4B     		ldr	r3, .L19+8
 316 005c 1B68     		ldr	r3, [r3]
 317 005e 5A1C     		add	r2, r3, #1
 318 0060 0B4B     		ldr	r3, .L19+8
 319 0062 1A60     		str	r2, [r3]
 320 0064 094B     		ldr	r3, .L19+4
 321 0066 1B68     		ldr	r3, [r3]
 322 0068 5A1C     		add	r2, r3, #1
 323 006a 084B     		ldr	r3, .L19+4
 324 006c 1A60     		str	r2, [r3]
 325              	.L17:
  79:../Main.c     **** 		if (pos == ((WS2812_QUANTITY*3)-1)) {go=1;}
 326              		.loc 2 79 0 is_stmt 1
 327 006e 074B     		ldr	r3, .L19+4
 328 0070 1A68     		ldr	r2, [r3]
 329 0072 094B     		ldr	r3, .L19+16
 330 0074 9A42     		cmp	r2, r3
 331 0076 02D1     		bne	.L18
 332              		.loc 2 79 0 is_stmt 0 discriminator 1
 333 0078 084B     		ldr	r3, .L19+20
 334 007a 0122     		mov	r2, #1
 335 007c 1A70     		strb	r2, [r3]
 336              	.L18:
  80:../Main.c     **** 		updateOnboardLEDs();
 337              		.loc 2 80 0 is_stmt 1
 338 007e FFF7FEFF 		bl	updateOnboardLEDs
 339              	.L14:
 340              	.LBE10:
  81:../Main.c     **** 	}
  82:../Main.c     **** 
  83:../Main.c     **** 	//UART001_WriteData(UART001_Handle0,uartInput);
  84:../Main.c     **** }
 341              		.loc 2 84 0
 342 0082 BD46     		mov	sp, r7
 343 0084 02B0     		add	sp, sp, #8
 344              		@ sp needed for prologue
 345 0086 80BD     		pop	{r7, pc}
 346              	.L20:
 347              		.align	2
 348              	.L19:
 349 0088 00000000 		.word	UART001_Handle0
 350 008c 04000000 		.word	pos
 351 0090 00000000 		.word	ptr
 352 0094 00000000 		.word	matrix
 353 0098 07010000 		.word	263
 354 009c 00000000 		.word	go
 355              		.cfi_endproc
 356              	.LFE405:
 358              		.section	.text.USIC0_1_IRQHandler,"ax",%progbits
 359              		.align	2
 360              		.global	USIC0_1_IRQHandler
 361              		.code	16
 362              		.thumb_func
 364              	USIC0_1_IRQHandler:
 365              	.LFB406:
  85:../Main.c     **** 
  86:../Main.c     **** 
  87:../Main.c     **** 
  88:../Main.c     **** void TxBufferEventHandler()
  89:../Main.c     **** {
 366              		.loc 2 89 0
 367              		.cfi_startproc
 368 0000 80B5     		push	{r7, lr}
 369              	.LCFI12:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 0002 00AF     		add	r7, sp, #0
 374              	.LCFI13:
 375              		.cfi_def_cfa_register 7
  90:../Main.c     **** 	if(UART001_GetFlagStatus(&UART001_Handle0,UART001_FIFO_STD_TRANSMIT_BUF_FLAG) == UART001_SET)
 376              		.loc 2 90 0
 377 0004 074B     		ldr	r3, .L23
 378 0006 181C     		mov	r0, r3
 379 0008 1321     		mov	r1, #19
 380 000a FFF7FEFF 		bl	UART001_GetFlagStatus
 381 000e 031C     		mov	r3, r0
 382 0010 022B     		cmp	r3, #2
 383 0012 04D1     		bne	.L21
  91:../Main.c     **** 		UART001_ClearFlag(&UART001_Handle0,UART001_FIFO_STD_TRANSMIT_BUF_FLAG);
 384              		.loc 2 91 0
 385 0014 034B     		ldr	r3, .L23
 386 0016 181C     		mov	r0, r3
 387 0018 1321     		mov	r1, #19
 388 001a FFF7FEFF 		bl	UART001_ClearFlag
 389              	.L21:
  92:../Main.c     **** }
 390              		.loc 2 92 0
 391 001e BD46     		mov	sp, r7
 392              		@ sp needed for prologue
 393 0020 80BD     		pop	{r7, pc}
 394              	.L24:
 395 0022 C046     		.align	2
 396              	.L23:
 397 0024 00000000 		.word	UART001_Handle0
 398              		.cfi_endproc
 399              	.LFE406:
 401              		.text
 402              	.Letext0:
 403              		.file 4 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 404              		.file 5 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC1100_series/Include/XMC1100.h"
 405              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/L
 406              		.file 7 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/U
 407              		.file 8 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/U
 408              		.file 9 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/I
 409              		.file 10 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/
 410              		.file 11 "C:\\DAVE3_workspace\\ws3.1.10\\CeilingLamp\\Dave\\Generated\\inc\\DAVESupport/../../inc/
DEFINED SYMBOLS
                            *ABS*:00000000 Main.c
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:18     .text.P0_5_set_mode:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:22     .text.P0_5_set_mode:00000000 P0_5_set_mode
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:65     .text.P0_5_set_mode:00000030 $d
                            *COM*:00000108 matrix
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:72     .bss:00000000 $d
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:73     .bss:00000000 ptr
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:76     .bss:00000004 pos
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:81     .bss:00000008 go
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:84     .text.main:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:89     .text.main:00000000 main
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:163    .text.main:00000048 $d
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:170    .text.testUARTTx:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:175    .text.testUARTTx:00000000 testUARTTx
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:195    .text.updateOnboardLEDs:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:200    .text.updateOnboardLEDs:00000000 updateOnboardLEDs
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:239    .text.updateOnboardLEDs:0000002c $d
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:246    .text.USIC0_0_IRQHandler:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:251    .text.USIC0_0_IRQHandler:00000000 USIC0_0_IRQHandler
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:349    .text.USIC0_0_IRQHandler:00000088 $d
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:359    .text.USIC0_1_IRQHandler:00000000 $t
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:364    .text.USIC0_1_IRQHandler:00000000 USIC0_1_IRQHandler
C:\Users\blinch\AppData\Local\Temp\ccOKZmli.s:397    .text.USIC0_1_IRQHandler:00000024 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.4f34ab06ae2725aaf04d3230f4ec23a7
                           .group:00000000 wm4.XMC1100.h.45.7a7cd799d7738130fcda8b83b0aa37d4
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.XMC1000_RomFunctionTable.h.31.6d9a94465618f31b040dc9cea9a47ad7
                           .group:00000000 wm4.XMC1100.h.114.be3711f71ee045884346be801053f4c0
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.383e3edbb9cbf6e538f7c1532ef623c1
                           .group:00000000 wm4.uc_id.h.35.eaf9b374d895319eacbb56387e04af18
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.2b978016b2a1b3f7530722d205f97ea7
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107
                           .group:00000000 wm4.SYSTM001.h.64.af8873ad2b760a8c44fafec70d7e8a7e
                           .group:00000000 wm4.NVIC002_Conf.h.63.641a9396c52c65009d6d8e781079fdb4
                           .group:00000000 wm4.light_ws2812_cortex.h.13.9ca19df782a0fb9140a989b314117286
                           .group:00000000 wm4.GPIO.h.2.93bf17ee3a853f64308a0e4d0c9f6a08

UNDEFINED SYMBOLS
DAVE_Init
ws2812_sendarray
IO004_Handle0
IO004_Handle1
UART001_GetFlagStatus
UART001_ClearFlag
UART001_Handle0
